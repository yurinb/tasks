/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tasks;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.plaf.basic.BasicBorders;

/**
 *
 * @author yurin
 */
public class Main extends javax.swing.JDialog {

    private int tasksIndex = 1;
    private boolean fixed_mode = false;
    private boolean edit_mode = false;

    private final ArrayList<Task> tasks;

    public Main(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.tasks = new ArrayList();
        initComponents();
        init();
    }

    private void init() {
        setBackground(new Color(0, 0, 0, 0));
        addBT.setVisible(false);
        closeBT.setVisible(false);
        tasksBT.setBorderPainted(false);
        new Thread(() -> {
            while (true) {
                try {
                    if (animationProcess()) {
                        Thread.sleep(5);
                    } else {
                        refreshView();
                        break;
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();
        //refreshView();
    }

    public void refreshView() {
        repaintTasks();
        toCorner();
        this.pack();
    }

    private boolean animationProcess() {
        if (getBounds().getX() - 50 >= Toolkit.getDefaultToolkit().getScreenSize().width - 50) {
            return false;
        }
        setBounds(getBounds().x + 10, 50, getBounds().width, getBounds().height);
        this.pack();
        return true;
    }

    public void toCorner() {
        setBounds((int) (Toolkit.getDefaultToolkit().getScreenSize().width - getBounds().getWidth()), 50, getBounds().width, getBounds().height);
        this.pack();
        System.out.println(getBounds().getY());
    }

    private void addTask() {
        Task item = new Task(this);
        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        tasksIndex++;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = tasksIndex;
        gridBagConstraints.anchor = GridBagConstraints.FIRST_LINE_END;
        tasks.add(item);
        refreshView();
        toCorner();
    }

    private void showTasks() {
        repaintTasks();
        setTasksVisible();
        if (edit_mode) {
            addBT.setVisible(true);
            closeBT.setVisible(true);
        } else {
            addBT.setVisible(false);
            closeBT.setVisible(false);
        }
        refreshView();
        toCorner();
    }

    private void hideTasks() {
        setTasksInvisible();
        addBT.setVisible(false);
        closeBT.setVisible(false);
    }

    private void repaintTasks() {
        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = GridBagConstraints.FIRST_LINE_END;
        int count = 1;
        for (Task task : tasks) {
            gridBagConstraints.gridy = count;
            count++;
            if (edit_mode) {
                task.setButtonsVisible();
            } else {
                task.setButtonsInvisible();
            }
            this.remove(task);
            this.add(task, gridBagConstraints);
        }
        if (count == 0) {
            this.tasksIndex = 1;
        } else {
            this.tasksIndex = count;
        }
    }

    private void setTasksInvisible() {
        tasks.forEach((t) -> {
            t.setVisible(false);
        });
    }

    private void setTasksVisible() {
        tasks.forEach((t) -> {
            t.setVisible(true);
        });
    }

    public void deleteTask(Task task) {
        this.getContentPane().remove(task);
        tasks.remove(task);
        refreshView();
        refreshView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tasksBT = new javax.swing.JButton();
        addBT = new javax.swing.JButton();
        closeBT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        tasksBT.setBackground(new java.awt.Color(22, 22, 22));
        tasksBT.setFont(new java.awt.Font("Consolas", 1, 13)); // NOI18N
        tasksBT.setForeground(new java.awt.Color(204, 204, 204));
        tasksBT.setText("tasks");
        tasksBT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 0)));
        tasksBT.setFocusPainted(false);
        tasksBT.setMaximumSize(new java.awt.Dimension(45, 16));
        tasksBT.setMinimumSize(new java.awt.Dimension(45, 16));
        tasksBT.setPreferredSize(new java.awt.Dimension(45, 16));
        tasksBT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tasksBTMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tasksBTMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tasksBTMouseExited(evt);
            }
        });
        tasksBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tasksBTActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        getContentPane().add(tasksBT, gridBagConstraints);

        addBT.setBackground(new java.awt.Color(22, 22, 22));
        addBT.setFont(new java.awt.Font("Consolas", 1, 13)); // NOI18N
        addBT.setForeground(new java.awt.Color(51, 204, 0));
        addBT.setText("+");
        addBT.setBorder(null);
        addBT.setFocusPainted(false);
        addBT.setPreferredSize(new java.awt.Dimension(19, 16));
        addBT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBTMouseClicked(evt);
            }
        });
        addBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(21, 0, 0, 0);
        getContentPane().add(addBT, gridBagConstraints);

        closeBT.setBackground(new java.awt.Color(102, 0, 51));
        closeBT.setFont(new java.awt.Font("Consolas", 1, 13)); // NOI18N
        closeBT.setForeground(new java.awt.Color(204, 204, 204));
        closeBT.setText("x");
        closeBT.setBorder(null);
        closeBT.setFocusPainted(false);
        closeBT.setPreferredSize(new java.awt.Dimension(19, 16));
        closeBT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeBTMouseClicked(evt);
            }
        });
        closeBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBTActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(21, 0, 0, 0);
        getContentPane().add(closeBT, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tasksBTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tasksBTMouseClicked
        if (fixed_mode) {
            System.out.println("default_mode");
            this.edit_mode = false;
            this.fixed_mode = false;
            tasksBT.setBorderPainted(false);
            return;
        }
        if (edit_mode) {
            System.out.println("fixed_mode");
            this.edit_mode = false;
            this.fixed_mode = true;
            tasksBT.setBorder(new BasicBorders.ButtonBorder(Color.BLUE, Color.BLUE, Color.BLUE, Color.BLUE));
            tasksBT.setBorderPainted(true);
        } else {
            System.out.println("edit_mode");
            this.edit_mode = true;
            tasksBT.setBorder(new BasicBorders.ButtonBorder(Color.RED, Color.RED, Color.RED, Color.RED));
            tasksBT.setBorderPainted(true);
        }
        showTasks();
        refreshView();
        refreshView();
    }//GEN-LAST:event_tasksBTMouseClicked

    private void tasksBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tasksBTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tasksBTActionPerformed

    private void addBTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBTMouseClicked
        addTask();
    }//GEN-LAST:event_addBTMouseClicked

    private void addBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addBTActionPerformed

    private void closeBTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeBTMouseClicked
        System.exit(0);
    }//GEN-LAST:event_closeBTMouseClicked

    private void closeBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_closeBTActionPerformed

    private void tasksBTMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tasksBTMouseEntered
        showTasks();
    }//GEN-LAST:event_tasksBTMouseEntered

    private void tasksBTMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tasksBTMouseExited
        if (fixed_mode || edit_mode) {
            showTasks();
        } else {
            hideTasks();
        }
        refreshView();
        refreshView();
    }//GEN-LAST:event_tasksBTMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Main dialog = new Main(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBT;
    private javax.swing.JButton closeBT;
    private javax.swing.JButton tasksBT;
    // End of variables declaration//GEN-END:variables
}
